
Motor_Speed_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000234a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  0000234a  000023de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800188  00800188  00002506  2**0
                  ALLOC
  3 .stab         00001bc0  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e2  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000053aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000554a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  0000573f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  00007955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  00008c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  00009f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_1>
       8:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <main>
      8a:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e8 57       	subi	r30, 0x78	; 120
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <__vector_14>:


/*******************************************************************************
 *                           ISR Definition                                    *
 *******************************************************************************/
ISR(ADC_vect) {
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62

	/* Read ADC Data after conversion */
	g_ADC_channel = ADC;
     dbc:	e4 e2       	ldi	r30, 0x24	; 36
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	90 93 89 01 	sts	0x0189, r25
     dc8:	80 93 88 01 	sts	0x0188, r24

	/* Run the callback function if set by the user */
	if (g_ADC_callback_ptr != NULL_PTR) {
     dcc:	80 91 8a 01 	lds	r24, 0x018A
     dd0:	90 91 8b 01 	lds	r25, 0x018B
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	29 f0       	breq	.+10     	; 0xde2 <__vector_14+0x50>
		g_ADC_callback_ptr();
     dd8:	e0 91 8a 01 	lds	r30, 0x018A
     ddc:	f0 91 8b 01 	lds	r31, 0x018B
     de0:	09 95       	icall
	}
}
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <ADC_init>:


/*******************************************************************************
 *                            ADC Functions                                    *
 *******************************************************************************/
void ADC_init(const ADC_TYPE_CONFIG * config_ptr) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <ADC_init+0x6>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize the ADMUX register as 0 */
	ADMUX = 0;
     e16:	e7 e2       	ldi	r30, 0x27	; 39
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	10 82       	st	Z, r1

	/* Reference Selection Bits */
	ADMUX |= (config_ptr->vref << 6);
     e1c:	a7 e2       	ldi	r26, 0x27	; 39
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e2       	ldi	r30, 0x27	; 39
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	28 2f       	mov	r18, r24
     e28:	e9 81       	ldd	r30, Y+1	; 0x01
     e2a:	fa 81       	ldd	r31, Y+2	; 0x02
     e2c:	80 81       	ld	r24, Z
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	00 24       	eor	r0, r0
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	07 94       	ror	r0
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	07 94       	ror	r0
     e40:	98 2f       	mov	r25, r24
     e42:	80 2d       	mov	r24, r0
     e44:	82 2b       	or	r24, r18
     e46:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA, ADEN);
     e48:	a6 e2       	ldi	r26, 0x26	; 38
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e6 e2       	ldi	r30, 0x26	; 38
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	8c 93       	st	X, r24

	/* Enable ADC Interrupt */
	SET_BIT(ADCSRA, ADIE);
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24

	/* Division Factor = config_ptr->prescaler */
	ADCSRA = (ADCSRA & 0xF8) | (config_ptr->prescaler);
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	98 2f       	mov	r25, r24
     e70:	98 7f       	andi	r25, 0xF8	; 248
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	89 2b       	or	r24, r25
     e7a:	8c 93       	st	X, r24
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <ADC_read_channel>:


void ADC_read_channel(uint8 channel_num) {
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01

	/* Select Channel */
	ADMUX = (ADMUX & 0xE0) | (channel_num & 0x07);
     e92:	a7 e2       	ldi	r26, 0x27	; 39
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e7 e2       	ldi	r30, 0x27	; 39
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	98 2f       	mov	r25, r24
     e9e:	90 7e       	andi	r25, 0xE0	; 224
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	87 70       	andi	r24, 0x07	; 7
     ea4:	89 2b       	or	r24, r25
     ea6:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA, ADSC);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <ADC_set_callback>:


void ADC_set_callback(void (*callback_fn_ptr)(void)) {
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <ADC_set_callback+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
	g_ADC_callback_ptr = callback_fn_ptr;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
     ed0:	90 93 8b 01 	sts	0x018B, r25
     ed4:	80 93 8a 01 	sts	0x018A, r24
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_1>:


/*******************************************************************************
 *                           ISR Definitions                                   *
 *******************************************************************************/
ISR(INT0_vect) {
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62

	/* Run the callback function if set by the user */
	if (g_INT0_callback_ptr != NULL_PTR) {
     f0c:	80 91 8c 01 	lds	r24, 0x018C
     f10:	90 91 8d 01 	lds	r25, 0x018D
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_1+0x40>
		g_INT0_callback_ptr();
     f18:	e0 91 8c 01 	lds	r30, 0x018C
     f1c:	f0 91 8d 01 	lds	r31, 0x018D
     f20:	09 95       	icall
	}
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_2>:

ISR(INT1_vect) {
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62

	/* Run the callback function if set by the user */
	if (g_INT1_callback_ptr != NULL_PTR) {
     f72:	80 91 8e 01 	lds	r24, 0x018E
     f76:	90 91 8f 01 	lds	r25, 0x018F
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__vector_2+0x40>
		g_INT1_callback_ptr();
     f7e:	e0 91 8e 01 	lds	r30, 0x018E
     f82:	f0 91 8f 01 	lds	r31, 0x018F
     f86:	09 95       	icall
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <INT0_init>:


/*******************************************************************************
 *                            EXT_INT Functions                                *
 *******************************************************************************/
void INT0_init(const EXT_INT_TYPE_CONFIG * config_ptr) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <INT0_init+0x6>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01

	/* Enable external interrupt INT0 */
	GICR  |= (1 << INT0);
     fbc:	ab e5       	ldi	r26, 0x5B	; 91
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e5       	ldi	r30, 0x5B	; 91
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24

	/* Configure INT0 Sense Control */
	MCUCR |= config_ptr->sense_control;
     fca:	a5 e5       	ldi	r26, 0x55	; 85
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e5 e5       	ldi	r30, 0x55	; 85
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	90 81       	ld	r25, Z
     fd4:	e9 81       	ldd	r30, Y+1	; 0x01
     fd6:	fa 81       	ldd	r31, Y+2	; 0x02
     fd8:	80 81       	ld	r24, Z
     fda:	89 2b       	or	r24, r25
     fdc:	8c 93       	st	X, r24

	/* Set PD2 (INT0) as input */
	DDRD &= ~ (1 << PD2);
     fde:	a1 e3       	ldi	r26, 0x31	; 49
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e1 e3       	ldi	r30, 0x31	; 49
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8b 7f       	andi	r24, 0xFB	; 251
     fea:	8c 93       	st	X, r24
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <INT1_init>:

void INT1_init(const EXT_INT_TYPE_CONFIG * config_ptr) {
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <INT1_init+0x6>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01

	/* Enable external interrupt INT1 */
	GICR  |= (1 << INT1);
    1004:	ab e5       	ldi	r26, 0x5B	; 91
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	eb e5       	ldi	r30, 0x5B	; 91
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	8c 93       	st	X, r24

	/* Configure INT0 Sense Control */
	MCUCR |= (config_ptr->sense_control << 2);
    1012:	a5 e5       	ldi	r26, 0x55	; 85
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e5       	ldi	r30, 0x55	; 85
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	28 2f       	mov	r18, r24
    101e:	e9 81       	ldd	r30, Y+1	; 0x01
    1020:	fa 81       	ldd	r31, Y+2	; 0x02
    1022:	80 81       	ld	r24, Z
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	82 2b       	or	r24, r18
    1032:	8c 93       	st	X, r24

	/* Set PD3 (INT1) as input */
	DDRD &= ~ (1 << PD3);
    1034:	a1 e3       	ldi	r26, 0x31	; 49
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e1 e3       	ldi	r30, 0x31	; 49
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	87 7f       	andi	r24, 0xF7	; 247
    1040:	8c 93       	st	X, r24
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <INT0_set_callback>:

void INT0_set_callback(void (*callback_fn_ptr)(void)) {
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <INT0_set_callback+0x6>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	g_INT0_callback_ptr = callback_fn_ptr;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	90 93 8d 01 	sts	0x018D, r25
    1062:	80 93 8c 01 	sts	0x018C, r24
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <INT1_set_callback>:

void INT1_set_callback(void (*callback_fn_ptr)(void)) {
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <INT1_set_callback+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	g_INT1_callback_ptr = callback_fn_ptr;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	90 93 8f 01 	sts	0x018F, r25
    1086:	80 93 8e 01 	sts	0x018E, r24
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <LCD_init>:


/*******************************************************************************
 *                            LCD Functions                                    *
 *******************************************************************************/
void LCD_init(void) {
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62

	// Set the 8 data pins as output
	LCD_DATA_PORT_DIRECTION = 0xFF;
    109c:	e4 e3       	ldi	r30, 0x34	; 52
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	80 83       	st	Z, r24

	// Set the RS, R/W, and E pins as output
	SET_BIT(LCD_CONTROL_PORT_DIRECTION, LCD_RS_PIN);
    10a4:	a1 e3       	ldi	r26, 0x31	; 49
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_PORT_DIRECTION, LCD_RW_PIN);
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_PORT_DIRECTION, LCD_E_PIN);
    10c0:	a1 e3       	ldi	r26, 0x31	; 49
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	8c 93       	st	X, r24

	// Set LCD Mode: 8 bits transmission, 2 lines display
	LCD_send_command(LCD_COMMAND_MODE_8BIT_2LINE);
    10ce:	88 e3       	ldi	r24, 0x38	; 56
    10d0:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_send_command>

	// Clear the display
	LCD_send_command(LCD_COMMAND_CLEAR);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_send_command>

	// Hide the cursor
	LCD_send_command(LCD_COMMAND_CURSOR_OFF);
    10da:	8c e0       	ldi	r24, 0x0C	; 12
    10dc:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_send_command>
}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <LCD_clear>:


void LCD_clear(void) {
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	LCD_send_command(LCD_COMMAND_CLEAR);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_send_command>
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <LCD_goto_row_col>:


void LCD_goto_row_col(uint8 row, uint8 col) {
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <LCD_goto_row_col+0x6>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <LCD_goto_row_col+0x8>
    1102:	0f 92       	push	r0
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 address;

	switch (row) {
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3d 83       	std	Y+5, r19	; 0x05
    1114:	2c 83       	std	Y+4, r18	; 0x04
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	91 05       	cpc	r25, r1
    111e:	c1 f0       	breq	.+48     	; 0x1150 <LCD_goto_row_col+0x56>
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	2c f4       	brge	.+10     	; 0x1134 <LCD_goto_row_col+0x3a>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	61 f0       	breq	.+24     	; 0x114a <LCD_goto_row_col+0x50>
    1132:	19 c0       	rjmp	.+50     	; 0x1166 <LCD_goto_row_col+0x6c>
    1134:	2c 81       	ldd	r18, Y+4	; 0x04
    1136:	3d 81       	ldd	r19, Y+5	; 0x05
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	69 f0       	breq	.+26     	; 0x1158 <LCD_goto_row_col+0x5e>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	61 f0       	breq	.+24     	; 0x1160 <LCD_goto_row_col+0x66>
    1148:	0e c0       	rjmp	.+28     	; 0x1166 <LCD_goto_row_col+0x6c>
		case 0:
			address = col;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <LCD_goto_row_col+0x6c>
			break;
		case 1:
			address = col + 0x40;
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	80 5c       	subi	r24, 0xC0	; 192
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <LCD_goto_row_col+0x6c>
			break;
		case 2:
			address = col + 0x10;
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	80 5f       	subi	r24, 0xF0	; 240
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <LCD_goto_row_col+0x6c>
			break;
		case 3:
			address = col + 0x50;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	80 5b       	subi	r24, 0xB0	; 176
    1164:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	LCD_send_command(LCD_SET_CURSOR | address);
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_send_command>
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <LCD_send_command>:


void LCD_send_command(uint8 command) {
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	e9 97       	sbiw	r28, 0x39	; 57
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	89 af       	std	Y+57, r24	; 0x39

	// Clear the enable bit
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	8c 93       	st	X, r24

	// Clear the RS bit for command transfer
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RS_PIN);
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	8c 93       	st	X, r24

	// Clear the R/W bit for write mode
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW_PIN);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8d 7f       	andi	r24, 0xFD	; 253
    11bc:	8c 93       	st	X, r24
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e8       	ldi	r26, 0x80	; 128
    11c4:	bf e3       	ldi	r27, 0x3F	; 63
    11c6:	8d ab       	std	Y+53, r24	; 0x35
    11c8:	9e ab       	std	Y+54, r25	; 0x36
    11ca:	af ab       	std	Y+55, r26	; 0x37
    11cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ce:	6d a9       	ldd	r22, Y+53	; 0x35
    11d0:	7e a9       	ldd	r23, Y+54	; 0x36
    11d2:	8f a9       	ldd	r24, Y+55	; 0x37
    11d4:	98 ad       	ldd	r25, Y+56	; 0x38
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	53 e4       	ldi	r21, 0x43	; 67
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	89 ab       	std	Y+49, r24	; 0x31
    11e8:	9a ab       	std	Y+50, r25	; 0x32
    11ea:	ab ab       	std	Y+51, r26	; 0x33
    11ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ee:	69 a9       	ldd	r22, Y+49	; 0x31
    11f0:	7a a9       	ldd	r23, Y+50	; 0x32
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1202:	88 23       	and	r24, r24
    1204:	2c f4       	brge	.+10     	; 0x1210 <LCD_send_command+0x92>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	98 ab       	std	Y+48, r25	; 0x30
    120c:	8f a7       	std	Y+47, r24	; 0x2f
    120e:	3f c0       	rjmp	.+126    	; 0x128e <LCD_send_command+0x110>
	else if (__tmp > 65535)
    1210:	69 a9       	ldd	r22, Y+49	; 0x31
    1212:	7a a9       	ldd	r23, Y+50	; 0x32
    1214:	8b a9       	ldd	r24, Y+51	; 0x33
    1216:	9c a9       	ldd	r25, Y+52	; 0x34
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1224:	18 16       	cp	r1, r24
    1226:	4c f5       	brge	.+82     	; 0x127a <LCD_send_command+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1228:	6d a9       	ldd	r22, Y+53	; 0x35
    122a:	7e a9       	ldd	r23, Y+54	; 0x36
    122c:	8f a9       	ldd	r24, Y+55	; 0x37
    122e:	98 ad       	ldd	r25, Y+56	; 0x38
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	98 ab       	std	Y+48, r25	; 0x30
    124e:	8f a7       	std	Y+47, r24	; 0x2f
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <LCD_send_command+0xf2>
    1252:	89 e1       	ldi	r24, 0x19	; 25
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9e a7       	std	Y+46, r25	; 0x2e
    1258:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    125a:	8d a5       	ldd	r24, Y+45	; 0x2d
    125c:	9e a5       	ldd	r25, Y+46	; 0x2e
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <LCD_send_command+0xe0>
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	8f a5       	ldd	r24, Y+47	; 0x2f
    1268:	98 a9       	ldd	r25, Y+48	; 0x30
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	98 ab       	std	Y+48, r25	; 0x30
    126e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1270:	8f a5       	ldd	r24, Y+47	; 0x2f
    1272:	98 a9       	ldd	r25, Y+48	; 0x30
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f7       	brne	.-38     	; 0x1252 <LCD_send_command+0xd4>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <LCD_send_command+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127a:	69 a9       	ldd	r22, Y+49	; 0x31
    127c:	7a a9       	ldd	r23, Y+50	; 0x32
    127e:	8b a9       	ldd	r24, Y+51	; 0x33
    1280:	9c a9       	ldd	r25, Y+52	; 0x34
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	98 ab       	std	Y+48, r25	; 0x30
    128c:	8f a7       	std	Y+47, r24	; 0x2f
    128e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1290:	98 a9       	ldd	r25, Y+48	; 0x30
    1292:	9c a7       	std	Y+44, r25	; 0x2c
    1294:	8b a7       	std	Y+43, r24	; 0x2b
    1296:	8b a5       	ldd	r24, Y+43	; 0x2b
    1298:	9c a5       	ldd	r25, Y+44	; 0x2c
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <LCD_send_command+0x11c>
    129e:	9c a7       	std	Y+44, r25	; 0x2c
    12a0:	8b a7       	std	Y+43, r24	; 0x2b

	// Delay (tas)
	_delay_ms(1);

	// Set the enable bit
	SET_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    12a2:	a2 e3       	ldi	r26, 0x32	; 50
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	8c 93       	st	X, r24
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e8       	ldi	r26, 0x80	; 128
    12b6:	bf e3       	ldi	r27, 0x3F	; 63
    12b8:	8f a3       	std	Y+39, r24	; 0x27
    12ba:	98 a7       	std	Y+40, r25	; 0x28
    12bc:	a9 a7       	std	Y+41, r26	; 0x29
    12be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c0:	6f a1       	ldd	r22, Y+39	; 0x27
    12c2:	78 a5       	ldd	r23, Y+40	; 0x28
    12c4:	89 a5       	ldd	r24, Y+41	; 0x29
    12c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	4a e7       	ldi	r20, 0x7A	; 122
    12ce:	53 e4       	ldi	r21, 0x43	; 67
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8b a3       	std	Y+35, r24	; 0x23
    12da:	9c a3       	std	Y+36, r25	; 0x24
    12dc:	ad a3       	std	Y+37, r26	; 0x25
    12de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e0:	6b a1       	ldd	r22, Y+35	; 0x23
    12e2:	7c a1       	ldd	r23, Y+36	; 0x24
    12e4:	8d a1       	ldd	r24, Y+37	; 0x25
    12e6:	9e a1       	ldd	r25, Y+38	; 0x26
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5f e3       	ldi	r21, 0x3F	; 63
    12f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	2c f4       	brge	.+10     	; 0x1302 <LCD_send_command+0x184>
		__ticks = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9a a3       	std	Y+34, r25	; 0x22
    12fe:	89 a3       	std	Y+33, r24	; 0x21
    1300:	3f c0       	rjmp	.+126    	; 0x1380 <LCD_send_command+0x202>
	else if (__tmp > 65535)
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	4f e7       	ldi	r20, 0x7F	; 127
    1310:	57 e4       	ldi	r21, 0x47	; 71
    1312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1316:	18 16       	cp	r1, r24
    1318:	4c f5       	brge	.+82     	; 0x136c <LCD_send_command+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	51 e4       	ldi	r21, 0x41	; 65
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <LCD_send_command+0x1e4>
    1344:	89 e1       	ldi	r24, 0x19	; 25
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 a3       	std	Y+32, r25	; 0x20
    134a:	8f 8f       	std	Y+31, r24	; 0x1f
    134c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134e:	98 a1       	ldd	r25, Y+32	; 0x20
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_send_command+0x1d2>
    1354:	98 a3       	std	Y+32, r25	; 0x20
    1356:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1358:	89 a1       	ldd	r24, Y+33	; 0x21
    135a:	9a a1       	ldd	r25, Y+34	; 0x22
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1362:	89 a1       	ldd	r24, Y+33	; 0x21
    1364:	9a a1       	ldd	r25, Y+34	; 0x22
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	69 f7       	brne	.-38     	; 0x1344 <LCD_send_command+0x1c6>
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <LCD_send_command+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136c:	6b a1       	ldd	r22, Y+35	; 0x23
    136e:	7c a1       	ldd	r23, Y+36	; 0x24
    1370:	8d a1       	ldd	r24, Y+37	; 0x25
    1372:	9e a1       	ldd	r25, Y+38	; 0x26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	89 a3       	std	Y+33, r24	; 0x21
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	9e 8f       	std	Y+30, r25	; 0x1e
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
    1388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_send_command+0x20e>
    1390:	9e 8f       	std	Y+30, r25	; 0x1e
    1392:	8d 8f       	std	Y+29, r24	; 0x1d

	// Delay (tpw - tdsw)
	_delay_ms(1);

	// Send the given command
	LCD_DATA_PORT = command;
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	80 83       	st	Z, r24
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e8       	ldi	r26, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	89 8f       	std	Y+25, r24	; 0x19
    13a6:	9a 8f       	std	Y+26, r25	; 0x1a
    13a8:	ab 8f       	std	Y+27, r26	; 0x1b
    13aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	69 8d       	ldd	r22, Y+25	; 0x19
    13ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4a e7       	ldi	r20, 0x7A	; 122
    13ba:	53 e4       	ldi	r21, 0x43	; 67
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8d 8b       	std	Y+21, r24	; 0x15
    13c6:	9e 8b       	std	Y+22, r25	; 0x16
    13c8:	af 8b       	std	Y+23, r26	; 0x17
    13ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	2c f4       	brge	.+10     	; 0x13ee <LCD_send_command+0x270>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9c 8b       	std	Y+20, r25	; 0x14
    13ea:	8b 8b       	std	Y+19, r24	; 0x13
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <LCD_send_command+0x2ee>
	else if (__tmp > 65535)
    13ee:	6d 89       	ldd	r22, Y+21	; 0x15
    13f0:	7e 89       	ldd	r23, Y+22	; 0x16
    13f2:	8f 89       	ldd	r24, Y+23	; 0x17
    13f4:	98 8d       	ldd	r25, Y+24	; 0x18
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	4f e7       	ldi	r20, 0x7F	; 127
    13fc:	57 e4       	ldi	r21, 0x47	; 71
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1402:	18 16       	cp	r1, r24
    1404:	4c f5       	brge	.+82     	; 0x1458 <LCD_send_command+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	69 8d       	ldd	r22, Y+25	; 0x19
    1408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e2       	ldi	r20, 0x20	; 32
    1414:	51 e4       	ldi	r21, 0x41	; 65
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
    142e:	0f c0       	rjmp	.+30     	; 0x144e <LCD_send_command+0x2d0>
    1430:	89 e1       	ldi	r24, 0x19	; 25
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11
    1438:	89 89       	ldd	r24, Y+17	; 0x11
    143a:	9a 89       	ldd	r25, Y+18	; 0x12
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <LCD_send_command+0x2be>
    1440:	9a 8b       	std	Y+18, r25	; 0x12
    1442:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	8b 89       	ldd	r24, Y+19	; 0x13
    1446:	9c 89       	ldd	r25, Y+20	; 0x14
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9c 8b       	std	Y+20, r25	; 0x14
    144c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	69 f7       	brne	.-38     	; 0x1430 <LCD_send_command+0x2b2>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <LCD_send_command+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9c 8b       	std	Y+20, r25	; 0x14
    146a:	8b 8b       	std	Y+19, r24	; 0x13
    146c:	8b 89       	ldd	r24, Y+19	; 0x13
    146e:	9c 89       	ldd	r25, Y+20	; 0x14
    1470:	98 8b       	std	Y+16, r25	; 0x10
    1472:	8f 87       	std	Y+15, r24	; 0x0f
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	98 89       	ldd	r25, Y+16	; 0x10
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_send_command+0x2fa>
    147c:	98 8b       	std	Y+16, r25	; 0x10
    147e:	8f 87       	std	Y+15, r24	; 0x0f

	// Delay (tdsw)
	_delay_ms(1);

	// Clear the enable bit
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8b 7f       	andi	r24, 0xFB	; 251
    148c:	8c 93       	st	X, r24
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e8       	ldi	r26, 0x80	; 128
    1494:	bf e3       	ldi	r27, 0x3F	; 63
    1496:	8b 87       	std	Y+11, r24	; 0x0b
    1498:	9c 87       	std	Y+12, r25	; 0x0c
    149a:	ad 87       	std	Y+13, r26	; 0x0d
    149c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a e7       	ldi	r20, 0x7A	; 122
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8f 83       	std	Y+7, r24	; 0x07
    14b8:	98 87       	std	Y+8, r25	; 0x08
    14ba:	a9 87       	std	Y+9, r26	; 0x09
    14bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <LCD_send_command+0x362>
		__ticks = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	3f c0       	rjmp	.+126    	; 0x155e <LCD_send_command+0x3e0>
	else if (__tmp > 65535)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <LCD_send_command+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e2       	ldi	r20, 0x20	; 32
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <LCD_send_command+0x3c2>
    1522:	89 e1       	ldi	r24, 0x19	; 25
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_send_command+0x3b0>
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f7       	brne	.-38     	; 0x1522 <LCD_send_command+0x3a4>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <LCD_send_command+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD_send_command+0x3ec>
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01

	// Delay (th)
	_delay_ms(1);
}
    1572:	e9 96       	adiw	r28, 0x39	; 57
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <LCD_display_char>:


void LCD_display_char(uint8 ch) {
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	e9 97       	sbiw	r28, 0x39	; 57
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	89 af       	std	Y+57, r24	; 0x39

	// Clear the enable bit
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    159a:	a2 e3       	ldi	r26, 0x32	; 50
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	8c 93       	st	X, r24

	// Clear the RS bit for data transfer
	SET_BIT(LCD_CONTROL_PORT, LCD_RS_PIN);
    15a8:	a2 e3       	ldi	r26, 0x32	; 50
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	81 60       	ori	r24, 0x01	; 1
    15b4:	8c 93       	st	X, r24

	// Clear the R/W bit for write mode
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW_PIN);
    15b6:	a2 e3       	ldi	r26, 0x32	; 50
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8d 7f       	andi	r24, 0xFD	; 253
    15c2:	8c 93       	st	X, r24
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e8       	ldi	r26, 0x80	; 128
    15ca:	bf e3       	ldi	r27, 0x3F	; 63
    15cc:	8d ab       	std	Y+53, r24	; 0x35
    15ce:	9e ab       	std	Y+54, r25	; 0x36
    15d0:	af ab       	std	Y+55, r26	; 0x37
    15d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6d a9       	ldd	r22, Y+53	; 0x35
    15d6:	7e a9       	ldd	r23, Y+54	; 0x36
    15d8:	8f a9       	ldd	r24, Y+55	; 0x37
    15da:	98 ad       	ldd	r25, Y+56	; 0x38
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	53 e4       	ldi	r21, 0x43	; 67
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	89 ab       	std	Y+49, r24	; 0x31
    15ee:	9a ab       	std	Y+50, r25	; 0x32
    15f0:	ab ab       	std	Y+51, r26	; 0x33
    15f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15f4:	69 a9       	ldd	r22, Y+49	; 0x31
    15f6:	7a a9       	ldd	r23, Y+50	; 0x32
    15f8:	8b a9       	ldd	r24, Y+51	; 0x33
    15fa:	9c a9       	ldd	r25, Y+52	; 0x34
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_display_char+0x92>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_display_char+0x110>
	else if (__tmp > 65535)
    1616:	69 a9       	ldd	r22, Y+49	; 0x31
    1618:	7a a9       	ldd	r23, Y+50	; 0x32
    161a:	8b a9       	ldd	r24, Y+51	; 0x33
    161c:	9c a9       	ldd	r25, Y+52	; 0x34
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_display_char+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6d a9       	ldd	r22, Y+53	; 0x35
    1630:	7e a9       	ldd	r23, Y+54	; 0x36
    1632:	8f a9       	ldd	r24, Y+55	; 0x37
    1634:	98 ad       	ldd	r25, Y+56	; 0x38
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_display_char+0xf2>
    1658:	89 e1       	ldi	r24, 0x19	; 25
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e a7       	std	Y+46, r25	; 0x2e
    165e:	8d a7       	std	Y+45, r24	; 0x2d
    1660:	8d a5       	ldd	r24, Y+45	; 0x2d
    1662:	9e a5       	ldd	r25, Y+46	; 0x2e
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_display_char+0xe0>
    1668:	9e a7       	std	Y+46, r25	; 0x2e
    166a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	98 ab       	std	Y+48, r25	; 0x30
    1674:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8f a5       	ldd	r24, Y+47	; 0x2f
    1678:	98 a9       	ldd	r25, Y+48	; 0x30
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_display_char+0xd4>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_display_char+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	69 a9       	ldd	r22, Y+49	; 0x31
    1682:	7a a9       	ldd	r23, Y+50	; 0x32
    1684:	8b a9       	ldd	r24, Y+51	; 0x33
    1686:	9c a9       	ldd	r25, Y+52	; 0x34
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	98 ab       	std	Y+48, r25	; 0x30
    1692:	8f a7       	std	Y+47, r24	; 0x2f
    1694:	8f a5       	ldd	r24, Y+47	; 0x2f
    1696:	98 a9       	ldd	r25, Y+48	; 0x30
    1698:	9c a7       	std	Y+44, r25	; 0x2c
    169a:	8b a7       	std	Y+43, r24	; 0x2b
    169c:	8b a5       	ldd	r24, Y+43	; 0x2b
    169e:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_display_char+0x11c>
    16a4:	9c a7       	std	Y+44, r25	; 0x2c
    16a6:	8b a7       	std	Y+43, r24	; 0x2b

	// Delay (tas)
	_delay_ms(1);

	// Set the enable bit
	SET_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    16a8:	a2 e3       	ldi	r26, 0x32	; 50
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	84 60       	ori	r24, 0x04	; 4
    16b4:	8c 93       	st	X, r24
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e8       	ldi	r26, 0x80	; 128
    16bc:	bf e3       	ldi	r27, 0x3F	; 63
    16be:	8f a3       	std	Y+39, r24	; 0x27
    16c0:	98 a7       	std	Y+40, r25	; 0x28
    16c2:	a9 a7       	std	Y+41, r26	; 0x29
    16c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c6:	6f a1       	ldd	r22, Y+39	; 0x27
    16c8:	78 a5       	ldd	r23, Y+40	; 0x28
    16ca:	89 a5       	ldd	r24, Y+41	; 0x29
    16cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	53 e4       	ldi	r21, 0x43	; 67
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8b a3       	std	Y+35, r24	; 0x23
    16e0:	9c a3       	std	Y+36, r25	; 0x24
    16e2:	ad a3       	std	Y+37, r26	; 0x25
    16e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16e6:	6b a1       	ldd	r22, Y+35	; 0x23
    16e8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ea:	8d a1       	ldd	r24, Y+37	; 0x25
    16ec:	9e a1       	ldd	r25, Y+38	; 0x26
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fa:	88 23       	and	r24, r24
    16fc:	2c f4       	brge	.+10     	; 0x1708 <LCD_display_char+0x184>
		__ticks = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9a a3       	std	Y+34, r25	; 0x22
    1704:	89 a3       	std	Y+33, r24	; 0x21
    1706:	3f c0       	rjmp	.+126    	; 0x1786 <LCD_display_char+0x202>
	else if (__tmp > 65535)
    1708:	6b a1       	ldd	r22, Y+35	; 0x23
    170a:	7c a1       	ldd	r23, Y+36	; 0x24
    170c:	8d a1       	ldd	r24, Y+37	; 0x25
    170e:	9e a1       	ldd	r25, Y+38	; 0x26
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	4c f5       	brge	.+82     	; 0x1772 <LCD_display_char+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1720:	6f a1       	ldd	r22, Y+39	; 0x27
    1722:	78 a5       	ldd	r23, Y+40	; 0x28
    1724:	89 a5       	ldd	r24, Y+41	; 0x29
    1726:	9a a5       	ldd	r25, Y+42	; 0x2a
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9a a3       	std	Y+34, r25	; 0x22
    1746:	89 a3       	std	Y+33, r24	; 0x21
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <LCD_display_char+0x1e4>
    174a:	89 e1       	ldi	r24, 0x19	; 25
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	98 a3       	std	Y+32, r25	; 0x20
    1750:	8f 8f       	std	Y+31, r24	; 0x1f
    1752:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1754:	98 a1       	ldd	r25, Y+32	; 0x20
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_display_char+0x1d2>
    175a:	98 a3       	std	Y+32, r25	; 0x20
    175c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175e:	89 a1       	ldd	r24, Y+33	; 0x21
    1760:	9a a1       	ldd	r25, Y+34	; 0x22
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9a a3       	std	Y+34, r25	; 0x22
    1766:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	69 f7       	brne	.-38     	; 0x174a <LCD_display_char+0x1c6>
    1770:	14 c0       	rjmp	.+40     	; 0x179a <LCD_display_char+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	6b a1       	ldd	r22, Y+35	; 0x23
    1774:	7c a1       	ldd	r23, Y+36	; 0x24
    1776:	8d a1       	ldd	r24, Y+37	; 0x25
    1778:	9e a1       	ldd	r25, Y+38	; 0x26
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9a a3       	std	Y+34, r25	; 0x22
    1784:	89 a3       	std	Y+33, r24	; 0x21
    1786:	89 a1       	ldd	r24, Y+33	; 0x21
    1788:	9a a1       	ldd	r25, Y+34	; 0x22
    178a:	9e 8f       	std	Y+30, r25	; 0x1e
    178c:	8d 8f       	std	Y+29, r24	; 0x1d
    178e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1790:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <LCD_display_char+0x20e>
    1796:	9e 8f       	std	Y+30, r25	; 0x1e
    1798:	8d 8f       	std	Y+29, r24	; 0x1d

	// Delay (tpw - tdsw)
	_delay_ms(1);

	// Send the given character
	LCD_DATA_PORT = ch;
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	89 ad       	ldd	r24, Y+57	; 0x39
    17a0:	80 83       	st	Z, r24
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e8       	ldi	r26, 0x80	; 128
    17a8:	bf e3       	ldi	r27, 0x3F	; 63
    17aa:	89 8f       	std	Y+25, r24	; 0x19
    17ac:	9a 8f       	std	Y+26, r25	; 0x1a
    17ae:	ab 8f       	std	Y+27, r26	; 0x1b
    17b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b2:	69 8d       	ldd	r22, Y+25	; 0x19
    17b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a e7       	ldi	r20, 0x7A	; 122
    17c0:	53 e4       	ldi	r21, 0x43	; 67
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8d 8b       	std	Y+21, r24	; 0x15
    17cc:	9e 8b       	std	Y+22, r25	; 0x16
    17ce:	af 8b       	std	Y+23, r26	; 0x17
    17d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d2:	6d 89       	ldd	r22, Y+21	; 0x15
    17d4:	7e 89       	ldd	r23, Y+22	; 0x16
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	98 8d       	ldd	r25, Y+24	; 0x18
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <LCD_display_char+0x270>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <LCD_display_char+0x2ee>
	else if (__tmp > 65535)
    17f4:	6d 89       	ldd	r22, Y+21	; 0x15
    17f6:	7e 89       	ldd	r23, Y+22	; 0x16
    17f8:	8f 89       	ldd	r24, Y+23	; 0x17
    17fa:	98 8d       	ldd	r25, Y+24	; 0x18
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	4c f5       	brge	.+82     	; 0x185e <LCD_display_char+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180c:	69 8d       	ldd	r22, Y+25	; 0x19
    180e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <LCD_display_char+0x2d0>
    1836:	89 e1       	ldi	r24, 0x19	; 25
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9a 8b       	std	Y+18, r25	; 0x12
    183c:	89 8b       	std	Y+17, r24	; 0x11
    183e:	89 89       	ldd	r24, Y+17	; 0x11
    1840:	9a 89       	ldd	r25, Y+18	; 0x12
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_display_char+0x2be>
    1846:	9a 8b       	std	Y+18, r25	; 0x12
    1848:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	8b 89       	ldd	r24, Y+19	; 0x13
    184c:	9c 89       	ldd	r25, Y+20	; 0x14
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	8b 89       	ldd	r24, Y+19	; 0x13
    1856:	9c 89       	ldd	r25, Y+20	; 0x14
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f7       	brne	.-38     	; 0x1836 <LCD_display_char+0x2b2>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <LCD_display_char+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	6d 89       	ldd	r22, Y+21	; 0x15
    1860:	7e 89       	ldd	r23, Y+22	; 0x16
    1862:	8f 89       	ldd	r24, Y+23	; 0x17
    1864:	98 8d       	ldd	r25, Y+24	; 0x18
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	98 8b       	std	Y+16, r25	; 0x10
    1878:	8f 87       	std	Y+15, r24	; 0x0f
    187a:	8f 85       	ldd	r24, Y+15	; 0x0f
    187c:	98 89       	ldd	r25, Y+16	; 0x10
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_display_char+0x2fa>
    1882:	98 8b       	std	Y+16, r25	; 0x10
    1884:	8f 87       	std	Y+15, r24	; 0x0f

	// Delay (tdsw)
	_delay_ms(1);

	// Clear the enable bit
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_E_PIN);
    1886:	a2 e3       	ldi	r26, 0x32	; 50
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e2 e3       	ldi	r30, 0x32	; 50
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8b 7f       	andi	r24, 0xFB	; 251
    1892:	8c 93       	st	X, r24
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	8b 87       	std	Y+11, r24	; 0x0b
    189e:	9c 87       	std	Y+12, r25	; 0x0c
    18a0:	ad 87       	std	Y+13, r26	; 0x0d
    18a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	98 87       	std	Y+8, r25	; 0x08
    18c0:	a9 87       	std	Y+9, r26	; 0x09
    18c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_display_char+0x362>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_display_char+0x3e0>
	else if (__tmp > 65535)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_display_char+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1900:	7c 85       	ldd	r23, Y+12	; 0x0c
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_display_char+0x3c2>
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	8b 83       	std	Y+3, r24	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_display_char+0x3b0>
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_display_char+0x3a4>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_display_char+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_display_char+0x3ec>
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01

	// Delay (th)
	_delay_ms(1);

}
    1978:	e9 96       	adiw	r28, 0x39	; 57
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <LCD_display_string>:


void LCD_display_string(uint8 *str_ptr) {
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <LCD_display_string+0x6>
    1990:	0f 92       	push	r0
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	9b 83       	std	Y+3, r25	; 0x03
    1998:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i;

	/* Iterate over the chars array */
	for(i = 0; str_ptr[i] != '\0'; i++) {
    199a:	19 82       	std	Y+1, r1	; 0x01
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <LCD_display_string+0x30>

		/* Display each char */
		LCD_display_char(str_ptr[i]);
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	fc 01       	movw	r30, r24
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	80 81       	ld	r24, Z
    19b0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_display_char>
void LCD_display_string(uint8 *str_ptr) {

	uint8 i;

	/* Iterate over the chars array */
	for(i = 0; str_ptr[i] != '\0'; i++) {
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	fc 01       	movw	r30, r24
    19c6:	e2 0f       	add	r30, r18
    19c8:	f3 1f       	adc	r31, r19
    19ca:	80 81       	ld	r24, Z
    19cc:	88 23       	and	r24, r24
    19ce:	39 f7       	brne	.-50     	; 0x199e <LCD_display_string+0x14>

		/* Display each char */
		LCD_display_char(str_ptr[i]);
	}
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <LCD_display_integer>:


void LCD_display_integer(sint32 num) {
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	64 97       	sbiw	r28, 0x14	; 20
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	69 8b       	std	Y+17, r22	; 0x11
    19f2:	7a 8b       	std	Y+18, r23	; 0x12
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
    19f6:	9c 8b       	std	Y+20, r25	; 0x14

	char string[16];

	/* Convert integer to an array of chars */
	itoa(num, string, 10);
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	9e 01       	movw	r18, r28
    19fe:	2f 5f       	subi	r18, 0xFF	; 255
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	b9 01       	movw	r22, r18
    1a04:	4a e0       	ldi	r20, 0x0A	; 10
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <itoa>

	/* Display the array */
	LCD_display_string(string);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_display_string>
}
    1a14:	64 96       	adiw	r28, 0x14	; 20
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <main>:


/*******************************************************************************
 *                      			Main	                                   *
 *******************************************************************************/
int main(void) {
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	27 97       	sbiw	r28, 0x07	; 7
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
	/*************************************************** Variables Declaration */
	char display_buffer[3];


	/*************************************************** Modules Configuration */
	ADC_TYPE_CONFIG ADC_type_config = {AVCC, ADC_P_8};
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8c 83       	std	Y+4, r24	; 0x04
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	8d 83       	std	Y+5, r24	; 0x05
	EXT_INT_TYPE_CONFIG INT1_type_config = {RISING_EDGE};
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	8e 83       	std	Y+6, r24	; 0x06
	MOTOR_TYPE_CONFIG motor_rotation = {CLOCKWISE};
    1a46:	1f 82       	std	Y+7, r1	; 0x07


	/************************************************** Modules Initialization */
	SET_BIT(SREG, 7);
    1a48:	af e5       	ldi	r26, 0x5F	; 95
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ef e5       	ldi	r30, 0x5F	; 95
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 68       	ori	r24, 0x80	; 128
    1a54:	8c 93       	st	X, r24

	LCD_init();
    1a56:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_init>
	LCD_goto_row_col(0, 2);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_goto_row_col>
	LCD_display_string("Speed Control");
    1a62:	80 e6       	ldi	r24, 0x60	; 96
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_display_string>
	LCD_goto_row_col(1, 0);
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_goto_row_col>
	LCD_display_string("Duty Cycle: ");
    1a72:	8e e6       	ldi	r24, 0x6E	; 110
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_display_string>

	ADC_init(&ADC_type_config);
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	04 96       	adiw	r24, 0x04	; 4
    1a7e:	0e 94 04 07 	call	0xe08	; 0xe08 <ADC_init>
	ADC_set_callback(ISR_ADC);
    1a82:	89 e8       	ldi	r24, 0x89	; 137
    1a84:	9d e0       	ldi	r25, 0x0D	; 13
    1a86:	0e 94 5f 07 	call	0xebe	; 0xebe <ADC_set_callback>

	MOTOR_1_init();
    1a8a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <MOTOR_1_init>
	MOTOR_1_ON(&motor_rotation);
    1a8e:	ce 01       	movw	r24, r28
    1a90:	07 96       	adiw	r24, 0x07	; 7
    1a92:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MOTOR_1_ON>

	INT1_init(&INT1_type_config);
    1a96:	ce 01       	movw	r24, r28
    1a98:	06 96       	adiw	r24, 0x06	; 6
    1a9a:	0e 94 fb 07 	call	0xff6	; 0xff6 <INT1_init>
	INT1_set_callback(ISR_INT1);
    1a9e:	81 eb       	ldi	r24, 0xB1	; 177
    1aa0:	9d e0       	ldi	r25, 0x0D	; 13
    1aa2:	0e 94 38 08 	call	0x1070	; 0x1070 <INT1_set_callback>

	TIMER_0_PWM_init(TIMER_P_8);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <TIMER_0_PWM_init>

	/*************************************************************** Main Loop */
	for(;;) {

		/* Start ADC Conversion */
		ADC_read_channel(ADC_CHANNEL_NUM);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	0e 94 43 07 	call	0xe86	; 0xe86 <ADC_read_channel>

		/* Shift LCD Cursor */
		LCD_goto_row_col(1, 12);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	6c e0       	ldi	r22, 0x0C	; 12
    1ab6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_goto_row_col>

		/* Display ADC Result */
		sprintf(display_buffer, "%03d", g_ADC_channel);
    1aba:	20 91 88 01 	lds	r18, 0x0188
    1abe:	30 91 89 01 	lds	r19, 0x0189
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <main+0x9e>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <main+0xa0>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <main+0xa2>
    1ac8:	ed b7       	in	r30, 0x3d	; 61
    1aca:	fe b7       	in	r31, 0x3e	; 62
    1acc:	31 96       	adiw	r30, 0x01	; 1
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
    1ad6:	8b e7       	ldi	r24, 0x7B	; 123
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	93 83       	std	Z+3, r25	; 0x03
    1adc:	82 83       	std	Z+2, r24	; 0x02
    1ade:	35 83       	std	Z+5, r19	; 0x05
    1ae0:	24 83       	std	Z+4, r18	; 0x04
    1ae2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <sprintf>
    1ae6:	8d b7       	in	r24, 0x3d	; 61
    1ae8:	9e b7       	in	r25, 0x3e	; 62
    1aea:	06 96       	adiw	r24, 0x06	; 6
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	9e bf       	out	0x3e, r25	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	8d bf       	out	0x3d, r24	; 61
		LCD_display_string(display_buffer);
    1af6:	ce 01       	movw	r24, r28
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_display_string>
		LCD_display_char('%');
    1afe:	85 e2       	ldi	r24, 0x25	; 37
    1b00:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_display_char>

		/* Update Duty Cycle */
		TIMER_0_PWM_set_duty_cyle(g_ADC_channel);
    1b04:	80 91 88 01 	lds	r24, 0x0188
    1b08:	90 91 89 01 	lds	r25, 0x0189
    1b0c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <TIMER_0_PWM_set_duty_cyle>
    1b10:	cd cf       	rjmp	.-102    	; 0x1aac <main+0x86>

00001b12 <ISR_ADC>:
	}
}

void ISR_ADC(void) {
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	 *
	 * m = 100 / 1023
	 *
	 */

	g_ADC_channel = (uint16) (((float32)100 / 1023) * g_ADC_channel);
    1b1a:	80 91 88 01 	lds	r24, 0x0188
    1b1e:	90 91 89 01 	lds	r25, 0x0189
    1b22:	cc 01       	movw	r24, r24
    1b24:	a0 e0       	ldi	r26, 0x00	; 0
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	2d e0       	ldi	r18, 0x0D	; 13
    1b3a:	32 e3       	ldi	r19, 0x32	; 50
    1b3c:	48 ec       	ldi	r20, 0xC8	; 200
    1b3e:	5d e3       	ldi	r21, 0x3D	; 61
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	90 93 89 01 	sts	0x0189, r25
    1b58:	80 93 88 01 	sts	0x0188, r24
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <ISR_INT1>:

void ISR_INT1(void) {
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <ISR_INT1+0x6>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62

	if (g_MOTOR_direction == CLOCKWISE) {
    1b6c:	80 91 90 01 	lds	r24, 0x0190
    1b70:	90 91 91 01 	lds	r25, 0x0191
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	79 f4       	brne	.+30     	; 0x1b96 <ISR_INT1+0x34>
		MOTOR_1_OFF();
    1b78:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MOTOR_1_OFF>
		MOTOR_TYPE_CONFIG motor_rotation = {COUNTER_CLOCKWISE};
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
		MOTOR_1_ON(&motor_rotation);
    1b80:	ce 01       	movw	r24, r28
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MOTOR_1_ON>
		g_MOTOR_direction = COUNTER_CLOCKWISE;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	90 93 91 01 	sts	0x0191, r25
    1b90:	80 93 90 01 	sts	0x0190, r24
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <ISR_INT1+0x4a>

	} else {
		MOTOR_1_OFF();
    1b96:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MOTOR_1_OFF>
		MOTOR_TYPE_CONFIG motor_rotation = {CLOCKWISE};
    1b9a:	1a 82       	std	Y+2, r1	; 0x02
		MOTOR_1_ON(&motor_rotation);
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	02 96       	adiw	r24, 0x02	; 2
    1ba0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <MOTOR_1_ON>
		g_MOTOR_direction = CLOCKWISE;
    1ba4:	10 92 91 01 	sts	0x0191, r1
    1ba8:	10 92 90 01 	sts	0x0190, r1
	}
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <MOTOR_1_init>:

/*******************************************************************************
 *                            Motor Driver Functions						   *
 *******************************************************************************/
#ifdef MOTOR_IN1
void MOTOR_1_init(void) {
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62

	/* Set the input and enable pins as output */
	SET_BIT(MOTOR_PORT_DIRECTION, MOTOR_IN1);
    1bbe:	a7 e3       	ldi	r26, 0x37	; 55
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e7 e3       	ldi	r30, 0x37	; 55
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	82 60       	ori	r24, 0x02	; 2
    1bca:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIRECTION, MOTOR_IN2);
    1bcc:	a7 e3       	ldi	r26, 0x37	; 55
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e3       	ldi	r30, 0x37	; 55
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	84 60       	ori	r24, 0x04	; 4
    1bd8:	8c 93       	st	X, r24

	/* Initialize the pins as 0 */
	MOTOR_1_OFF();
    1bda:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MOTOR_1_OFF>
}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <MOTOR_1_OFF>:

void MOTOR_1_OFF(void) {
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(MOTOR_PORT, MOTOR_IN1);
    1bec:	a8 e3       	ldi	r26, 0x38	; 56
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e8 e3       	ldi	r30, 0x38	; 56
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8d 7f       	andi	r24, 0xFD	; 253
    1bf8:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT, MOTOR_IN2);
    1bfa:	a8 e3       	ldi	r26, 0x38	; 56
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8b 7f       	andi	r24, 0xFB	; 251
    1c06:	8c 93       	st	X, r24
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <MOTOR_1_ON>:

void MOTOR_1_ON(MOTOR_TYPE_CONFIG* motor_rotation) {
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <MOTOR_1_ON+0x6>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01

	if (motor_rotation->rotation == CLOCKWISE) {
    1c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	79 f4       	brne	.+30     	; 0x1c44 <MOTOR_1_ON+0x36>
		SET_BIT(MOTOR_PORT, MOTOR_IN1);
    1c26:	a8 e3       	ldi	r26, 0x38	; 56
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	8c 93       	st	X, r24
		CLEAR_BIT(MOTOR_PORT, MOTOR_IN2);
    1c34:	a8 e3       	ldi	r26, 0x38	; 56
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 e3       	ldi	r30, 0x38	; 56
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8b 7f       	andi	r24, 0xFB	; 251
    1c40:	8c 93       	st	X, r24
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <MOTOR_1_ON+0x52>
	} else {
		CLEAR_BIT(MOTOR_PORT, MOTOR_IN1);
    1c44:	a8 e3       	ldi	r26, 0x38	; 56
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	8c 93       	st	X, r24
		SET_BIT(MOTOR_PORT, MOTOR_IN2);
    1c52:	a8 e3       	ldi	r26, 0x38	; 56
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	84 60       	ori	r24, 0x04	; 4
    1c5e:	8c 93       	st	X, r24
	}
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <TIMER_0_PWM_init>:


/*******************************************************************************
 *                            Timer Functions                                  *
 *******************************************************************************/
void TIMER_0_PWM_init(TIMER_PRESCALER prescaler) {
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	89 83       	std	Y+1, r24	; 0x01

	/* Initialize Timer Count*/
	TCNT0 = 0;
    1c76:	e2 e5       	ldi	r30, 0x52	; 82
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	10 82       	st	Z, r1

	/* Set Compare Value (Initial Duty Cycle = 50%) */
	OCR0  = 128;
    1c7c:	ec e5       	ldi	r30, 0x5C	; 92
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 e8       	ldi	r24, 0x80	; 128
    1c82:	80 83       	st	Z, r24

	/* Configure the OC0 PIN as Output */
	DDRB  = DDRB | (1<<PB3);
    1c84:	a7 e3       	ldi	r26, 0x37	; 55
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e7 e3       	ldi	r30, 0x37	; 55
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 60       	ori	r24, 0x08	; 8
    1c90:	8c 93       	st	X, r24

	/* Configure PWM in Non-inverting Mode */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | prescaler;
    1c92:	e3 e5       	ldi	r30, 0x53	; 83
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	88 66       	ori	r24, 0x68	; 104
    1c9a:	80 83       	st	Z, r24

	/* Configure the OC0 PIN as Output */
	SET_BIT(DDRD, PD5);
    1c9c:	a1 e3       	ldi	r26, 0x31	; 49
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e1 e3       	ldi	r30, 0x31	; 49
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 62       	ori	r24, 0x20	; 32
    1ca8:	8c 93       	st	X, r24
}
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <TIMER_0_PWM_set_duty_cyle>:


void TIMER_0_PWM_set_duty_cyle(uint8 duty_cycle) {
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <TIMER_0_PWM_set_duty_cyle+0x6>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
	 *
	 * m = 255 / 100
	 *
	 */

	uint8 y = ((float32)255 / 100) * duty_cycle;
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	97 fd       	sbrc	r25, 7
    1cc8:	a0 95       	com	r26
    1cca:	ba 2f       	mov	r27, r26
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	23 e3       	ldi	r18, 0x33	; 51
    1cde:	33 e3       	ldi	r19, 0x33	; 51
    1ce0:	43 e2       	ldi	r20, 0x23	; 35
    1ce2:	50 e4       	ldi	r21, 0x40	; 64
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = y;
    1cfa:	ec e5       	ldi	r30, 0x5C	; 92
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	80 83       	st	Z, r24
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <__prologue_saves__>:
    1d0c:	2f 92       	push	r2
    1d0e:	3f 92       	push	r3
    1d10:	4f 92       	push	r4
    1d12:	5f 92       	push	r5
    1d14:	6f 92       	push	r6
    1d16:	7f 92       	push	r7
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	ca 1b       	sub	r28, r26
    1d36:	db 0b       	sbc	r29, r27
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	09 94       	ijmp

00001d44 <__epilogue_restores__>:
    1d44:	2a 88       	ldd	r2, Y+18	; 0x12
    1d46:	39 88       	ldd	r3, Y+17	; 0x11
    1d48:	48 88       	ldd	r4, Y+16	; 0x10
    1d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d56:	b9 84       	ldd	r11, Y+9	; 0x09
    1d58:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5a:	df 80       	ldd	r13, Y+7	; 0x07
    1d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d60:	0c 81       	ldd	r16, Y+4	; 0x04
    1d62:	1b 81       	ldd	r17, Y+3	; 0x03
    1d64:	aa 81       	ldd	r26, Y+2	; 0x02
    1d66:	b9 81       	ldd	r27, Y+1	; 0x01
    1d68:	ce 0f       	add	r28, r30
    1d6a:	d1 1d       	adc	r29, r1
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	ed 01       	movw	r28, r26
    1d78:	08 95       	ret

00001d7a <itoa>:
    1d7a:	fb 01       	movw	r30, r22
    1d7c:	9f 01       	movw	r18, r30
    1d7e:	e8 94       	clt
    1d80:	42 30       	cpi	r20, 0x02	; 2
    1d82:	c4 f0       	brlt	.+48     	; 0x1db4 <itoa+0x3a>
    1d84:	45 32       	cpi	r20, 0x25	; 37
    1d86:	b4 f4       	brge	.+44     	; 0x1db4 <itoa+0x3a>
    1d88:	4a 30       	cpi	r20, 0x0A	; 10
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <itoa+0x1c>
    1d8c:	97 fb       	bst	r25, 7
    1d8e:	1e f4       	brtc	.+6      	; 0x1d96 <itoa+0x1c>
    1d90:	90 95       	com	r25
    1d92:	81 95       	neg	r24
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	64 2f       	mov	r22, r20
    1d98:	77 27       	eor	r23, r23
    1d9a:	0e 94 8f 11 	call	0x231e	; 0x231e <__udivmodhi4>
    1d9e:	80 5d       	subi	r24, 0xD0	; 208
    1da0:	8a 33       	cpi	r24, 0x3A	; 58
    1da2:	0c f0       	brlt	.+2      	; 0x1da6 <itoa+0x2c>
    1da4:	89 5d       	subi	r24, 0xD9	; 217
    1da6:	81 93       	st	Z+, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	a1 f7       	brne	.-24     	; 0x1d96 <itoa+0x1c>
    1dae:	16 f4       	brtc	.+4      	; 0x1db4 <itoa+0x3a>
    1db0:	5d e2       	ldi	r21, 0x2D	; 45
    1db2:	51 93       	st	Z+, r21
    1db4:	10 82       	st	Z, r1
    1db6:	c9 01       	movw	r24, r18
    1db8:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <strrev>

00001dbc <sprintf>:
    1dbc:	ae e0       	ldi	r26, 0x0E	; 14
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e4 ee       	ldi	r30, 0xE4	; 228
    1dc2:	fe e0       	ldi	r31, 0x0E	; 14
    1dc4:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__prologue_saves__+0x1c>
    1dc8:	0d 89       	ldd	r16, Y+21	; 0x15
    1dca:	1e 89       	ldd	r17, Y+22	; 0x16
    1dcc:	86 e0       	ldi	r24, 0x06	; 6
    1dce:	8c 83       	std	Y+4, r24	; 0x04
    1dd0:	1a 83       	std	Y+2, r17	; 0x02
    1dd2:	09 83       	std	Y+1, r16	; 0x01
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f e7       	ldi	r25, 0x7F	; 127
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	9e 01       	movw	r18, r28
    1dde:	27 5e       	subi	r18, 0xE7	; 231
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	6f 89       	ldd	r22, Y+23	; 0x17
    1de8:	78 8d       	ldd	r23, Y+24	; 0x18
    1dea:	a9 01       	movw	r20, r18
    1dec:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <vfprintf>
    1df0:	2f 81       	ldd	r18, Y+7	; 0x07
    1df2:	38 85       	ldd	r19, Y+8	; 0x08
    1df4:	02 0f       	add	r16, r18
    1df6:	13 1f       	adc	r17, r19
    1df8:	f8 01       	movw	r30, r16
    1dfa:	10 82       	st	Z, r1
    1dfc:	2e 96       	adiw	r28, 0x0e	; 14
    1dfe:	e4 e0       	ldi	r30, 0x04	; 4
    1e00:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__epilogue_restores__+0x1c>

00001e04 <vfprintf>:
    1e04:	ab e0       	ldi	r26, 0x0B	; 11
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e8 e0       	ldi	r30, 0x08	; 8
    1e0a:	ff e0       	ldi	r31, 0x0F	; 15
    1e0c:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__>
    1e10:	3c 01       	movw	r6, r24
    1e12:	2b 01       	movw	r4, r22
    1e14:	5a 01       	movw	r10, r20
    1e16:	fc 01       	movw	r30, r24
    1e18:	17 82       	std	Z+7, r1	; 0x07
    1e1a:	16 82       	std	Z+6, r1	; 0x06
    1e1c:	83 81       	ldd	r24, Z+3	; 0x03
    1e1e:	81 fd       	sbrc	r24, 1
    1e20:	03 c0       	rjmp	.+6      	; 0x1e28 <vfprintf+0x24>
    1e22:	6f ef       	ldi	r22, 0xFF	; 255
    1e24:	7f ef       	ldi	r23, 0xFF	; 255
    1e26:	c6 c1       	rjmp	.+908    	; 0x21b4 <vfprintf+0x3b0>
    1e28:	9a e0       	ldi	r25, 0x0A	; 10
    1e2a:	89 2e       	mov	r8, r25
    1e2c:	1e 01       	movw	r2, r28
    1e2e:	08 94       	sec
    1e30:	21 1c       	adc	r2, r1
    1e32:	31 1c       	adc	r3, r1
    1e34:	f3 01       	movw	r30, r6
    1e36:	23 81       	ldd	r18, Z+3	; 0x03
    1e38:	f2 01       	movw	r30, r4
    1e3a:	23 fd       	sbrc	r18, 3
    1e3c:	85 91       	lpm	r24, Z+
    1e3e:	23 ff       	sbrs	r18, 3
    1e40:	81 91       	ld	r24, Z+
    1e42:	2f 01       	movw	r4, r30
    1e44:	88 23       	and	r24, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <vfprintf+0x46>
    1e48:	b2 c1       	rjmp	.+868    	; 0x21ae <vfprintf+0x3aa>
    1e4a:	85 32       	cpi	r24, 0x25	; 37
    1e4c:	39 f4       	brne	.+14     	; 0x1e5c <vfprintf+0x58>
    1e4e:	23 fd       	sbrc	r18, 3
    1e50:	85 91       	lpm	r24, Z+
    1e52:	23 ff       	sbrs	r18, 3
    1e54:	81 91       	ld	r24, Z+
    1e56:	2f 01       	movw	r4, r30
    1e58:	85 32       	cpi	r24, 0x25	; 37
    1e5a:	29 f4       	brne	.+10     	; 0x1e66 <vfprintf+0x62>
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	b3 01       	movw	r22, r6
    1e60:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    1e64:	e7 cf       	rjmp	.-50     	; 0x1e34 <vfprintf+0x30>
    1e66:	98 2f       	mov	r25, r24
    1e68:	ff 24       	eor	r15, r15
    1e6a:	ee 24       	eor	r14, r14
    1e6c:	99 24       	eor	r9, r9
    1e6e:	ff e1       	ldi	r31, 0x1F	; 31
    1e70:	ff 15       	cp	r31, r15
    1e72:	d0 f0       	brcs	.+52     	; 0x1ea8 <vfprintf+0xa4>
    1e74:	9b 32       	cpi	r25, 0x2B	; 43
    1e76:	69 f0       	breq	.+26     	; 0x1e92 <vfprintf+0x8e>
    1e78:	9c 32       	cpi	r25, 0x2C	; 44
    1e7a:	28 f4       	brcc	.+10     	; 0x1e86 <vfprintf+0x82>
    1e7c:	90 32       	cpi	r25, 0x20	; 32
    1e7e:	59 f0       	breq	.+22     	; 0x1e96 <vfprintf+0x92>
    1e80:	93 32       	cpi	r25, 0x23	; 35
    1e82:	91 f4       	brne	.+36     	; 0x1ea8 <vfprintf+0xa4>
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <vfprintf+0x9e>
    1e86:	9d 32       	cpi	r25, 0x2D	; 45
    1e88:	49 f0       	breq	.+18     	; 0x1e9c <vfprintf+0x98>
    1e8a:	90 33       	cpi	r25, 0x30	; 48
    1e8c:	69 f4       	brne	.+26     	; 0x1ea8 <vfprintf+0xa4>
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	24 c0       	rjmp	.+72     	; 0x1eda <vfprintf+0xd6>
    1e92:	52 e0       	ldi	r21, 0x02	; 2
    1e94:	f5 2a       	or	r15, r21
    1e96:	84 e0       	ldi	r24, 0x04	; 4
    1e98:	f8 2a       	or	r15, r24
    1e9a:	28 c0       	rjmp	.+80     	; 0x1eec <vfprintf+0xe8>
    1e9c:	98 e0       	ldi	r25, 0x08	; 8
    1e9e:	f9 2a       	or	r15, r25
    1ea0:	25 c0       	rjmp	.+74     	; 0x1eec <vfprintf+0xe8>
    1ea2:	e0 e1       	ldi	r30, 0x10	; 16
    1ea4:	fe 2a       	or	r15, r30
    1ea6:	22 c0       	rjmp	.+68     	; 0x1eec <vfprintf+0xe8>
    1ea8:	f7 fc       	sbrc	r15, 7
    1eaa:	29 c0       	rjmp	.+82     	; 0x1efe <vfprintf+0xfa>
    1eac:	89 2f       	mov	r24, r25
    1eae:	80 53       	subi	r24, 0x30	; 48
    1eb0:	8a 30       	cpi	r24, 0x0A	; 10
    1eb2:	70 f4       	brcc	.+28     	; 0x1ed0 <vfprintf+0xcc>
    1eb4:	f6 fe       	sbrs	r15, 6
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <vfprintf+0xbe>
    1eb8:	98 9c       	mul	r9, r8
    1eba:	90 2c       	mov	r9, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	98 0e       	add	r9, r24
    1ec0:	15 c0       	rjmp	.+42     	; 0x1eec <vfprintf+0xe8>
    1ec2:	e8 9c       	mul	r14, r8
    1ec4:	e0 2c       	mov	r14, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	e8 0e       	add	r14, r24
    1eca:	f0 e2       	ldi	r31, 0x20	; 32
    1ecc:	ff 2a       	or	r15, r31
    1ece:	0e c0       	rjmp	.+28     	; 0x1eec <vfprintf+0xe8>
    1ed0:	9e 32       	cpi	r25, 0x2E	; 46
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <vfprintf+0xda>
    1ed4:	f6 fc       	sbrc	r15, 6
    1ed6:	6b c1       	rjmp	.+726    	; 0x21ae <vfprintf+0x3aa>
    1ed8:	40 e4       	ldi	r20, 0x40	; 64
    1eda:	f4 2a       	or	r15, r20
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <vfprintf+0xe8>
    1ede:	9c 36       	cpi	r25, 0x6C	; 108
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <vfprintf+0xe4>
    1ee2:	50 e8       	ldi	r21, 0x80	; 128
    1ee4:	f5 2a       	or	r15, r21
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <vfprintf+0xe8>
    1ee8:	98 36       	cpi	r25, 0x68	; 104
    1eea:	49 f4       	brne	.+18     	; 0x1efe <vfprintf+0xfa>
    1eec:	f2 01       	movw	r30, r4
    1eee:	23 fd       	sbrc	r18, 3
    1ef0:	95 91       	lpm	r25, Z+
    1ef2:	23 ff       	sbrs	r18, 3
    1ef4:	91 91       	ld	r25, Z+
    1ef6:	2f 01       	movw	r4, r30
    1ef8:	99 23       	and	r25, r25
    1efa:	09 f0       	breq	.+2      	; 0x1efe <vfprintf+0xfa>
    1efc:	b8 cf       	rjmp	.-144    	; 0x1e6e <vfprintf+0x6a>
    1efe:	89 2f       	mov	r24, r25
    1f00:	85 54       	subi	r24, 0x45	; 69
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	18 f0       	brcs	.+6      	; 0x1f0c <vfprintf+0x108>
    1f06:	80 52       	subi	r24, 0x20	; 32
    1f08:	83 30       	cpi	r24, 0x03	; 3
    1f0a:	38 f4       	brcc	.+14     	; 0x1f1a <vfprintf+0x116>
    1f0c:	44 e0       	ldi	r20, 0x04	; 4
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	a4 0e       	add	r10, r20
    1f12:	b5 1e       	adc	r11, r21
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	59 83       	std	Y+1, r21	; 0x01
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <vfprintf+0x134>
    1f1a:	93 36       	cpi	r25, 0x63	; 99
    1f1c:	31 f0       	breq	.+12     	; 0x1f2a <vfprintf+0x126>
    1f1e:	93 37       	cpi	r25, 0x73	; 115
    1f20:	79 f0       	breq	.+30     	; 0x1f40 <vfprintf+0x13c>
    1f22:	93 35       	cpi	r25, 0x53	; 83
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <vfprintf+0x124>
    1f26:	56 c0       	rjmp	.+172    	; 0x1fd4 <vfprintf+0x1d0>
    1f28:	20 c0       	rjmp	.+64     	; 0x1f6a <vfprintf+0x166>
    1f2a:	f5 01       	movw	r30, r10
    1f2c:	80 81       	ld	r24, Z
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	42 e0       	ldi	r20, 0x02	; 2
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	a4 0e       	add	r10, r20
    1f36:	b5 1e       	adc	r11, r21
    1f38:	61 01       	movw	r12, r2
    1f3a:	01 e0       	ldi	r16, 0x01	; 1
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	12 c0       	rjmp	.+36     	; 0x1f64 <vfprintf+0x160>
    1f40:	f5 01       	movw	r30, r10
    1f42:	c0 80       	ld	r12, Z
    1f44:	d1 80       	ldd	r13, Z+1	; 0x01
    1f46:	f6 fc       	sbrc	r15, 6
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <vfprintf+0x14c>
    1f4a:	6f ef       	ldi	r22, 0xFF	; 255
    1f4c:	7f ef       	ldi	r23, 0xFF	; 255
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x150>
    1f50:	69 2d       	mov	r22, r9
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	42 e0       	ldi	r20, 0x02	; 2
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	a4 0e       	add	r10, r20
    1f5a:	b5 1e       	adc	r11, r21
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <strnlen>
    1f62:	8c 01       	movw	r16, r24
    1f64:	5f e7       	ldi	r21, 0x7F	; 127
    1f66:	f5 22       	and	r15, r21
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <vfprintf+0x18e>
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	c0 80       	ld	r12, Z
    1f6e:	d1 80       	ldd	r13, Z+1	; 0x01
    1f70:	f6 fc       	sbrc	r15, 6
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <vfprintf+0x176>
    1f74:	6f ef       	ldi	r22, 0xFF	; 255
    1f76:	7f ef       	ldi	r23, 0xFF	; 255
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x17a>
    1f7a:	69 2d       	mov	r22, r9
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	42 e0       	ldi	r20, 0x02	; 2
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	a4 0e       	add	r10, r20
    1f84:	b5 1e       	adc	r11, r21
    1f86:	c6 01       	movw	r24, r12
    1f88:	0e 94 df 10 	call	0x21be	; 0x21be <strnlen_P>
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	50 e8       	ldi	r21, 0x80	; 128
    1f90:	f5 2a       	or	r15, r21
    1f92:	f3 fe       	sbrs	r15, 3
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <vfprintf+0x1a0>
    1f96:	1a c0       	rjmp	.+52     	; 0x1fcc <vfprintf+0x1c8>
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	b3 01       	movw	r22, r6
    1f9e:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    1fa2:	ea 94       	dec	r14
    1fa4:	8e 2d       	mov	r24, r14
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	08 17       	cp	r16, r24
    1faa:	19 07       	cpc	r17, r25
    1fac:	a8 f3       	brcs	.-22     	; 0x1f98 <vfprintf+0x194>
    1fae:	0e c0       	rjmp	.+28     	; 0x1fcc <vfprintf+0x1c8>
    1fb0:	f6 01       	movw	r30, r12
    1fb2:	f7 fc       	sbrc	r15, 7
    1fb4:	85 91       	lpm	r24, Z+
    1fb6:	f7 fe       	sbrs	r15, 7
    1fb8:	81 91       	ld	r24, Z+
    1fba:	6f 01       	movw	r12, r30
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	b3 01       	movw	r22, r6
    1fc0:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    1fc4:	e1 10       	cpse	r14, r1
    1fc6:	ea 94       	dec	r14
    1fc8:	01 50       	subi	r16, 0x01	; 1
    1fca:	10 40       	sbci	r17, 0x00	; 0
    1fcc:	01 15       	cp	r16, r1
    1fce:	11 05       	cpc	r17, r1
    1fd0:	79 f7       	brne	.-34     	; 0x1fb0 <vfprintf+0x1ac>
    1fd2:	ea c0       	rjmp	.+468    	; 0x21a8 <vfprintf+0x3a4>
    1fd4:	94 36       	cpi	r25, 0x64	; 100
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <vfprintf+0x1d8>
    1fd8:	99 36       	cpi	r25, 0x69	; 105
    1fda:	69 f5       	brne	.+90     	; 0x2036 <vfprintf+0x232>
    1fdc:	f7 fe       	sbrs	r15, 7
    1fde:	08 c0       	rjmp	.+16     	; 0x1ff0 <vfprintf+0x1ec>
    1fe0:	f5 01       	movw	r30, r10
    1fe2:	20 81       	ld	r18, Z
    1fe4:	31 81       	ldd	r19, Z+1	; 0x01
    1fe6:	42 81       	ldd	r20, Z+2	; 0x02
    1fe8:	53 81       	ldd	r21, Z+3	; 0x03
    1fea:	84 e0       	ldi	r24, 0x04	; 4
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0a c0       	rjmp	.+20     	; 0x2004 <vfprintf+0x200>
    1ff0:	f5 01       	movw	r30, r10
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	44 27       	eor	r20, r20
    1ffa:	37 fd       	sbrc	r19, 7
    1ffc:	40 95       	com	r20
    1ffe:	54 2f       	mov	r21, r20
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a8 0e       	add	r10, r24
    2006:	b9 1e       	adc	r11, r25
    2008:	9f e6       	ldi	r25, 0x6F	; 111
    200a:	f9 22       	and	r15, r25
    200c:	57 ff       	sbrs	r21, 7
    200e:	09 c0       	rjmp	.+18     	; 0x2022 <vfprintf+0x21e>
    2010:	50 95       	com	r21
    2012:	40 95       	com	r20
    2014:	30 95       	com	r19
    2016:	21 95       	neg	r18
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	4f 4f       	sbci	r20, 0xFF	; 255
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	e0 e8       	ldi	r30, 0x80	; 128
    2020:	fe 2a       	or	r15, r30
    2022:	ca 01       	movw	r24, r20
    2024:	b9 01       	movw	r22, r18
    2026:	a1 01       	movw	r20, r2
    2028:	2a e0       	ldi	r18, 0x0A	; 10
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	0e 94 31 11 	call	0x2262	; 0x2262 <__ultoa_invert>
    2030:	d8 2e       	mov	r13, r24
    2032:	d2 18       	sub	r13, r2
    2034:	40 c0       	rjmp	.+128    	; 0x20b6 <vfprintf+0x2b2>
    2036:	95 37       	cpi	r25, 0x75	; 117
    2038:	29 f4       	brne	.+10     	; 0x2044 <vfprintf+0x240>
    203a:	1f 2d       	mov	r17, r15
    203c:	1f 7e       	andi	r17, 0xEF	; 239
    203e:	2a e0       	ldi	r18, 0x0A	; 10
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	1d c0       	rjmp	.+58     	; 0x207e <vfprintf+0x27a>
    2044:	1f 2d       	mov	r17, r15
    2046:	19 7f       	andi	r17, 0xF9	; 249
    2048:	9f 36       	cpi	r25, 0x6F	; 111
    204a:	61 f0       	breq	.+24     	; 0x2064 <vfprintf+0x260>
    204c:	90 37       	cpi	r25, 0x70	; 112
    204e:	20 f4       	brcc	.+8      	; 0x2058 <vfprintf+0x254>
    2050:	98 35       	cpi	r25, 0x58	; 88
    2052:	09 f0       	breq	.+2      	; 0x2056 <vfprintf+0x252>
    2054:	ac c0       	rjmp	.+344    	; 0x21ae <vfprintf+0x3aa>
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <vfprintf+0x272>
    2058:	90 37       	cpi	r25, 0x70	; 112
    205a:	39 f0       	breq	.+14     	; 0x206a <vfprintf+0x266>
    205c:	98 37       	cpi	r25, 0x78	; 120
    205e:	09 f0       	breq	.+2      	; 0x2062 <vfprintf+0x25e>
    2060:	a6 c0       	rjmp	.+332    	; 0x21ae <vfprintf+0x3aa>
    2062:	04 c0       	rjmp	.+8      	; 0x206c <vfprintf+0x268>
    2064:	28 e0       	ldi	r18, 0x08	; 8
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	0a c0       	rjmp	.+20     	; 0x207e <vfprintf+0x27a>
    206a:	10 61       	ori	r17, 0x10	; 16
    206c:	14 fd       	sbrc	r17, 4
    206e:	14 60       	ori	r17, 0x04	; 4
    2070:	20 e1       	ldi	r18, 0x10	; 16
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	04 c0       	rjmp	.+8      	; 0x207e <vfprintf+0x27a>
    2076:	14 fd       	sbrc	r17, 4
    2078:	16 60       	ori	r17, 0x06	; 6
    207a:	20 e1       	ldi	r18, 0x10	; 16
    207c:	32 e0       	ldi	r19, 0x02	; 2
    207e:	17 ff       	sbrs	r17, 7
    2080:	08 c0       	rjmp	.+16     	; 0x2092 <vfprintf+0x28e>
    2082:	f5 01       	movw	r30, r10
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	44 e0       	ldi	r20, 0x04	; 4
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	08 c0       	rjmp	.+16     	; 0x20a2 <vfprintf+0x29e>
    2092:	f5 01       	movw	r30, r10
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	bc 01       	movw	r22, r24
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	42 e0       	ldi	r20, 0x02	; 2
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	a4 0e       	add	r10, r20
    20a4:	b5 1e       	adc	r11, r21
    20a6:	a1 01       	movw	r20, r2
    20a8:	0e 94 31 11 	call	0x2262	; 0x2262 <__ultoa_invert>
    20ac:	d8 2e       	mov	r13, r24
    20ae:	d2 18       	sub	r13, r2
    20b0:	8f e7       	ldi	r24, 0x7F	; 127
    20b2:	f8 2e       	mov	r15, r24
    20b4:	f1 22       	and	r15, r17
    20b6:	f6 fe       	sbrs	r15, 6
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <vfprintf+0x2cc>
    20ba:	5e ef       	ldi	r21, 0xFE	; 254
    20bc:	f5 22       	and	r15, r21
    20be:	d9 14       	cp	r13, r9
    20c0:	38 f4       	brcc	.+14     	; 0x20d0 <vfprintf+0x2cc>
    20c2:	f4 fe       	sbrs	r15, 4
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <vfprintf+0x2d0>
    20c6:	f2 fc       	sbrc	r15, 2
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <vfprintf+0x2d0>
    20ca:	8f ee       	ldi	r24, 0xEF	; 239
    20cc:	f8 22       	and	r15, r24
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <vfprintf+0x2d0>
    20d0:	1d 2d       	mov	r17, r13
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <vfprintf+0x2d2>
    20d4:	19 2d       	mov	r17, r9
    20d6:	f4 fe       	sbrs	r15, 4
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <vfprintf+0x2f0>
    20da:	fe 01       	movw	r30, r28
    20dc:	ed 0d       	add	r30, r13
    20de:	f1 1d       	adc	r31, r1
    20e0:	80 81       	ld	r24, Z
    20e2:	80 33       	cpi	r24, 0x30	; 48
    20e4:	19 f4       	brne	.+6      	; 0x20ec <vfprintf+0x2e8>
    20e6:	99 ee       	ldi	r25, 0xE9	; 233
    20e8:	f9 22       	and	r15, r25
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <vfprintf+0x2f8>
    20ec:	1f 5f       	subi	r17, 0xFF	; 255
    20ee:	f2 fe       	sbrs	r15, 2
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <vfprintf+0x2f8>
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x2f6>
    20f4:	8f 2d       	mov	r24, r15
    20f6:	86 78       	andi	r24, 0x86	; 134
    20f8:	09 f0       	breq	.+2      	; 0x20fc <vfprintf+0x2f8>
    20fa:	1f 5f       	subi	r17, 0xFF	; 255
    20fc:	0f 2d       	mov	r16, r15
    20fe:	f3 fc       	sbrc	r15, 3
    2100:	14 c0       	rjmp	.+40     	; 0x212a <vfprintf+0x326>
    2102:	f0 fe       	sbrs	r15, 0
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <vfprintf+0x320>
    2106:	1e 15       	cp	r17, r14
    2108:	10 f0       	brcs	.+4      	; 0x210e <vfprintf+0x30a>
    210a:	9d 2c       	mov	r9, r13
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <vfprintf+0x320>
    210e:	9d 2c       	mov	r9, r13
    2110:	9e 0c       	add	r9, r14
    2112:	91 1a       	sub	r9, r17
    2114:	1e 2d       	mov	r17, r14
    2116:	06 c0       	rjmp	.+12     	; 0x2124 <vfprintf+0x320>
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	b3 01       	movw	r22, r6
    211e:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    2122:	1f 5f       	subi	r17, 0xFF	; 255
    2124:	1e 15       	cp	r17, r14
    2126:	c0 f3       	brcs	.-16     	; 0x2118 <vfprintf+0x314>
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <vfprintf+0x32e>
    212a:	1e 15       	cp	r17, r14
    212c:	10 f4       	brcc	.+4      	; 0x2132 <vfprintf+0x32e>
    212e:	e1 1a       	sub	r14, r17
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <vfprintf+0x330>
    2132:	ee 24       	eor	r14, r14
    2134:	04 ff       	sbrs	r16, 4
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <vfprintf+0x352>
    2138:	80 e3       	ldi	r24, 0x30	; 48
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	b3 01       	movw	r22, r6
    213e:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    2142:	02 ff       	sbrs	r16, 2
    2144:	1d c0       	rjmp	.+58     	; 0x2180 <vfprintf+0x37c>
    2146:	01 fd       	sbrc	r16, 1
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <vfprintf+0x34c>
    214a:	88 e7       	ldi	r24, 0x78	; 120
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e c0       	rjmp	.+28     	; 0x216c <vfprintf+0x368>
    2150:	88 e5       	ldi	r24, 0x58	; 88
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0b c0       	rjmp	.+22     	; 0x216c <vfprintf+0x368>
    2156:	80 2f       	mov	r24, r16
    2158:	86 78       	andi	r24, 0x86	; 134
    215a:	91 f0       	breq	.+36     	; 0x2180 <vfprintf+0x37c>
    215c:	01 ff       	sbrs	r16, 1
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <vfprintf+0x360>
    2160:	8b e2       	ldi	r24, 0x2B	; 43
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <vfprintf+0x362>
    2164:	80 e2       	ldi	r24, 0x20	; 32
    2166:	f7 fc       	sbrc	r15, 7
    2168:	8d e2       	ldi	r24, 0x2D	; 45
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	b3 01       	movw	r22, r6
    216e:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    2172:	06 c0       	rjmp	.+12     	; 0x2180 <vfprintf+0x37c>
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	b3 01       	movw	r22, r6
    217a:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    217e:	9a 94       	dec	r9
    2180:	d9 14       	cp	r13, r9
    2182:	c0 f3       	brcs	.-16     	; 0x2174 <vfprintf+0x370>
    2184:	da 94       	dec	r13
    2186:	f1 01       	movw	r30, r2
    2188:	ed 0d       	add	r30, r13
    218a:	f1 1d       	adc	r31, r1
    218c:	80 81       	ld	r24, Z
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	b3 01       	movw	r22, r6
    2192:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    2196:	dd 20       	and	r13, r13
    2198:	a9 f7       	brne	.-22     	; 0x2184 <vfprintf+0x380>
    219a:	06 c0       	rjmp	.+12     	; 0x21a8 <vfprintf+0x3a4>
    219c:	80 e2       	ldi	r24, 0x20	; 32
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	b3 01       	movw	r22, r6
    21a2:	0e 94 05 11 	call	0x220a	; 0x220a <fputc>
    21a6:	ea 94       	dec	r14
    21a8:	ee 20       	and	r14, r14
    21aa:	c1 f7       	brne	.-16     	; 0x219c <vfprintf+0x398>
    21ac:	43 ce       	rjmp	.-890    	; 0x1e34 <vfprintf+0x30>
    21ae:	f3 01       	movw	r30, r6
    21b0:	66 81       	ldd	r22, Z+6	; 0x06
    21b2:	77 81       	ldd	r23, Z+7	; 0x07
    21b4:	cb 01       	movw	r24, r22
    21b6:	2b 96       	adiw	r28, 0x0b	; 11
    21b8:	e2 e1       	ldi	r30, 0x12	; 18
    21ba:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__>

000021be <strnlen_P>:
    21be:	fc 01       	movw	r30, r24
    21c0:	05 90       	lpm	r0, Z+
    21c2:	61 50       	subi	r22, 0x01	; 1
    21c4:	70 40       	sbci	r23, 0x00	; 0
    21c6:	01 10       	cpse	r0, r1
    21c8:	d8 f7       	brcc	.-10     	; 0x21c0 <strnlen_P+0x2>
    21ca:	80 95       	com	r24
    21cc:	90 95       	com	r25
    21ce:	8e 0f       	add	r24, r30
    21d0:	9f 1f       	adc	r25, r31
    21d2:	08 95       	ret

000021d4 <strnlen>:
    21d4:	fc 01       	movw	r30, r24
    21d6:	61 50       	subi	r22, 0x01	; 1
    21d8:	70 40       	sbci	r23, 0x00	; 0
    21da:	01 90       	ld	r0, Z+
    21dc:	01 10       	cpse	r0, r1
    21de:	d8 f7       	brcc	.-10     	; 0x21d6 <strnlen+0x2>
    21e0:	80 95       	com	r24
    21e2:	90 95       	com	r25
    21e4:	8e 0f       	add	r24, r30
    21e6:	9f 1f       	adc	r25, r31
    21e8:	08 95       	ret

000021ea <strrev>:
    21ea:	dc 01       	movw	r26, r24
    21ec:	fc 01       	movw	r30, r24
    21ee:	67 2f       	mov	r22, r23
    21f0:	71 91       	ld	r23, Z+
    21f2:	77 23       	and	r23, r23
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <strrev+0x4>
    21f6:	32 97       	sbiw	r30, 0x02	; 2
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <strrev+0x18>
    21fa:	7c 91       	ld	r23, X
    21fc:	6d 93       	st	X+, r22
    21fe:	70 83       	st	Z, r23
    2200:	62 91       	ld	r22, -Z
    2202:	ae 17       	cp	r26, r30
    2204:	bf 07       	cpc	r27, r31
    2206:	c8 f3       	brcs	.-14     	; 0x21fa <strrev+0x10>
    2208:	08 95       	ret

0000220a <fputc>:
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	8c 01       	movw	r16, r24
    2214:	eb 01       	movw	r28, r22
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	81 ff       	sbrs	r24, 1
    221a:	1b c0       	rjmp	.+54     	; 0x2252 <fputc+0x48>
    221c:	82 ff       	sbrs	r24, 2
    221e:	0d c0       	rjmp	.+26     	; 0x223a <fputc+0x30>
    2220:	2e 81       	ldd	r18, Y+6	; 0x06
    2222:	3f 81       	ldd	r19, Y+7	; 0x07
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	28 17       	cp	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	64 f4       	brge	.+24     	; 0x2246 <fputc+0x3c>
    222e:	e8 81       	ld	r30, Y
    2230:	f9 81       	ldd	r31, Y+1	; 0x01
    2232:	01 93       	st	Z+, r16
    2234:	f9 83       	std	Y+1, r31	; 0x01
    2236:	e8 83       	st	Y, r30
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <fputc+0x3c>
    223a:	e8 85       	ldd	r30, Y+8	; 0x08
    223c:	f9 85       	ldd	r31, Y+9	; 0x09
    223e:	80 2f       	mov	r24, r16
    2240:	09 95       	icall
    2242:	89 2b       	or	r24, r25
    2244:	31 f4       	brne	.+12     	; 0x2252 <fputc+0x48>
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	01 96       	adiw	r24, 0x01	; 1
    224c:	9f 83       	std	Y+7, r25	; 0x07
    224e:	8e 83       	std	Y+6, r24	; 0x06
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <fputc+0x4c>
    2252:	0f ef       	ldi	r16, 0xFF	; 255
    2254:	1f ef       	ldi	r17, 0xFF	; 255
    2256:	c8 01       	movw	r24, r16
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	08 95       	ret

00002262 <__ultoa_invert>:
    2262:	fa 01       	movw	r30, r20
    2264:	aa 27       	eor	r26, r26
    2266:	28 30       	cpi	r18, 0x08	; 8
    2268:	51 f1       	breq	.+84     	; 0x22be <__ultoa_invert+0x5c>
    226a:	20 31       	cpi	r18, 0x10	; 16
    226c:	81 f1       	breq	.+96     	; 0x22ce <__ultoa_invert+0x6c>
    226e:	e8 94       	clt
    2270:	6f 93       	push	r22
    2272:	6e 7f       	andi	r22, 0xFE	; 254
    2274:	6e 5f       	subi	r22, 0xFE	; 254
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	8f 4f       	sbci	r24, 0xFF	; 255
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	af 4f       	sbci	r26, 0xFF	; 255
    227e:	b1 e0       	ldi	r27, 0x01	; 1
    2280:	3e d0       	rcall	.+124    	; 0x22fe <__ultoa_invert+0x9c>
    2282:	b4 e0       	ldi	r27, 0x04	; 4
    2284:	3c d0       	rcall	.+120    	; 0x22fe <__ultoa_invert+0x9c>
    2286:	67 0f       	add	r22, r23
    2288:	78 1f       	adc	r23, r24
    228a:	89 1f       	adc	r24, r25
    228c:	9a 1f       	adc	r25, r26
    228e:	a1 1d       	adc	r26, r1
    2290:	68 0f       	add	r22, r24
    2292:	79 1f       	adc	r23, r25
    2294:	8a 1f       	adc	r24, r26
    2296:	91 1d       	adc	r25, r1
    2298:	a1 1d       	adc	r26, r1
    229a:	6a 0f       	add	r22, r26
    229c:	71 1d       	adc	r23, r1
    229e:	81 1d       	adc	r24, r1
    22a0:	91 1d       	adc	r25, r1
    22a2:	a1 1d       	adc	r26, r1
    22a4:	20 d0       	rcall	.+64     	; 0x22e6 <__ultoa_invert+0x84>
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__ultoa_invert+0x48>
    22a8:	68 94       	set
    22aa:	3f 91       	pop	r19
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	26 9f       	mul	r18, r22
    22b0:	11 24       	eor	r1, r1
    22b2:	30 19       	sub	r19, r0
    22b4:	30 5d       	subi	r19, 0xD0	; 208
    22b6:	31 93       	st	Z+, r19
    22b8:	de f6       	brtc	.-74     	; 0x2270 <__ultoa_invert+0xe>
    22ba:	cf 01       	movw	r24, r30
    22bc:	08 95       	ret
    22be:	46 2f       	mov	r20, r22
    22c0:	47 70       	andi	r20, 0x07	; 7
    22c2:	40 5d       	subi	r20, 0xD0	; 208
    22c4:	41 93       	st	Z+, r20
    22c6:	b3 e0       	ldi	r27, 0x03	; 3
    22c8:	0f d0       	rcall	.+30     	; 0x22e8 <__ultoa_invert+0x86>
    22ca:	c9 f7       	brne	.-14     	; 0x22be <__ultoa_invert+0x5c>
    22cc:	f6 cf       	rjmp	.-20     	; 0x22ba <__ultoa_invert+0x58>
    22ce:	46 2f       	mov	r20, r22
    22d0:	4f 70       	andi	r20, 0x0F	; 15
    22d2:	40 5d       	subi	r20, 0xD0	; 208
    22d4:	4a 33       	cpi	r20, 0x3A	; 58
    22d6:	18 f0       	brcs	.+6      	; 0x22de <__ultoa_invert+0x7c>
    22d8:	49 5d       	subi	r20, 0xD9	; 217
    22da:	31 fd       	sbrc	r19, 1
    22dc:	40 52       	subi	r20, 0x20	; 32
    22de:	41 93       	st	Z+, r20
    22e0:	02 d0       	rcall	.+4      	; 0x22e6 <__ultoa_invert+0x84>
    22e2:	a9 f7       	brne	.-22     	; 0x22ce <__ultoa_invert+0x6c>
    22e4:	ea cf       	rjmp	.-44     	; 0x22ba <__ultoa_invert+0x58>
    22e6:	b4 e0       	ldi	r27, 0x04	; 4
    22e8:	a6 95       	lsr	r26
    22ea:	97 95       	ror	r25
    22ec:	87 95       	ror	r24
    22ee:	77 95       	ror	r23
    22f0:	67 95       	ror	r22
    22f2:	ba 95       	dec	r27
    22f4:	c9 f7       	brne	.-14     	; 0x22e8 <__ultoa_invert+0x86>
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	61 05       	cpc	r22, r1
    22fa:	71 05       	cpc	r23, r1
    22fc:	08 95       	ret
    22fe:	9b 01       	movw	r18, r22
    2300:	ac 01       	movw	r20, r24
    2302:	0a 2e       	mov	r0, r26
    2304:	06 94       	lsr	r0
    2306:	57 95       	ror	r21
    2308:	47 95       	ror	r20
    230a:	37 95       	ror	r19
    230c:	27 95       	ror	r18
    230e:	ba 95       	dec	r27
    2310:	c9 f7       	brne	.-14     	; 0x2304 <__ultoa_invert+0xa2>
    2312:	62 0f       	add	r22, r18
    2314:	73 1f       	adc	r23, r19
    2316:	84 1f       	adc	r24, r20
    2318:	95 1f       	adc	r25, r21
    231a:	a0 1d       	adc	r26, r0
    231c:	08 95       	ret

0000231e <__udivmodhi4>:
    231e:	aa 1b       	sub	r26, r26
    2320:	bb 1b       	sub	r27, r27
    2322:	51 e1       	ldi	r21, 0x11	; 17
    2324:	07 c0       	rjmp	.+14     	; 0x2334 <__udivmodhi4_ep>

00002326 <__udivmodhi4_loop>:
    2326:	aa 1f       	adc	r26, r26
    2328:	bb 1f       	adc	r27, r27
    232a:	a6 17       	cp	r26, r22
    232c:	b7 07       	cpc	r27, r23
    232e:	10 f0       	brcs	.+4      	; 0x2334 <__udivmodhi4_ep>
    2330:	a6 1b       	sub	r26, r22
    2332:	b7 0b       	sbc	r27, r23

00002334 <__udivmodhi4_ep>:
    2334:	88 1f       	adc	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	5a 95       	dec	r21
    233a:	a9 f7       	brne	.-22     	; 0x2326 <__udivmodhi4_loop>
    233c:	80 95       	com	r24
    233e:	90 95       	com	r25
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	08 95       	ret

00002346 <_exit>:
    2346:	f8 94       	cli

00002348 <__stop_program>:
    2348:	ff cf       	rjmp	.-2      	; 0x2348 <__stop_program>
